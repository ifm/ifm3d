name: Build (Windows_VS2017)
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build-windows:
    runs-on: windows-2016

    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Check cache for prebuilt dependencies
      id: get-dep-cache
      uses: actions/cache@v1.0.3
      with:
        path: c:\deps\install
        key: ifm3d-deps-2 # Increment to force-clear cache

    - name: Create output directory
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: mkdir c:\deps\install

    - name: Install boost
      uses: MarkusJx/install-boost@v1.0.1
      id: install-boost
      with:
       # REQUIRED: Specify the required boost version
       # A list of supported versions can be found here:
       # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
       boost_version: 1.73.0
       # OPTIONAL: Specify a toolset on windows
       toolset: msvc14.1
       # OPTIONAL: Specify a custon install location
       boost_install_dir: c:\deps

    - name: Build dependency - curl
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd /d c:\deps
        git clone --branch curl-7_47_1 https://github.com/curl/curl.git
        mkdir curl\build
        cd curl\build
        cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON -DCMAKE_INSTALL_PREFIX=c:\deps\install ..
        cmake --build . --clean-first --config Release --target INSTALL

    - name: Build dependency - xmlrpc-c
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd /d c:\deps
        git clone --branch 1.33.14-cmake https://github.com/ifm/xmlrpc-c.git
        mkdir xmlrpc-c\build
        cd xmlrpc-c\build
        cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_INSTALL_PREFIX=c:\deps\install ..
        cmake --build . --clean-first --config Release --target INSTALL

    - name: Build dependency - glog
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd /d c:\deps
        git clone --branch v0.3.5 https://github.com/google/glog.git
        mkdir glog\build
        cd glog\build
        cmake -G "Visual Studio 15 2017 Win64" -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=c:\deps\install ..
        cmake --build . --clean-first --config Release --target INSTALL

    - name: Build dependency - FLANN
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd /d c:\deps
        git clone --branch 1.9.1 https://github.com/mariusmuja/flann.git
        mkdir flann\build
        cd flann\build
        cmake -G "Visual Studio 15 2017 Win64" -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_MATLAB_BINDINGS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_DOC=OFF -DCMAKE_INSTALL_PREFIX=\deps\install ..
        cmake --build . --clean-first --config Release --target INSTALL

    - name: Build dependency - Eigen
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd /d c:\deps
        git clone --branch 3.3.4 https://github.com/eigenteam/eigen-git-mirror.git eigen
        mkdir eigen\build
        cd eigen\build
        cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_INSTALL_PREFIX=c:\deps\install ..
        cmake --build . --clean-first --config Release --target INSTALL

    - name: Build dependency - PCL
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      run: |
        cd /d c:\deps
        git clone --branch pcl-1.10.1 https://github.com/PointCloudLibrary/pcl.git
        mkdir pcl\build
        cd pcl\build
        cmake -G "Visual Studio 15 2017 Win64" -DBOOST_ROOT=%BOOST_ROOT% -DPCL_ENABLE_SSE=OFF -DWITH_CUDA=OFF -DWITH_DAVIDSDK=OFF -DWITH_DOCS=OFF -DWITH_DSSDK=OFF -DWITH_ENSENSO=OFF -DWITH_FZAPI=OFF -DWITH_LIBUSB=OFF -DWITH_OPENGL=OFF -DWITH_VTK=OFF -DWITH_OPENNI=OFF -DWITH_OPENNI2=OFF -DWITH_PCAP=OFF -DWITH_PNG=OFF -DWITH_QHULL=OFF -DWITH_QT=OFF -DWITH_RSSDK=OFF  -DBUILD_tools=OFF -DBUILD_visualization=OFF -DBUILD_features=OFF -DBUILD_filters=OFF -DBUILD_global_tests=OFF -DBUILD_io=OFF -DBUILD_kdtree=OFF -DBUILD_keypoints=OFF -DBUILD_octree=OFF -DBUILD_range_image=OFF -DBUILD_registration=OFF -DBUILD_sample_consensus=OFF -DBUILD_segmentation=OFF -DBUILD_surface=OFF -DCMAKE_INSTALL_PREFIX=c:\deps\install ..
        cmake --build . --clean-first --config Release --target INSTALL

    - name: Build dependency - OpenCV
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd /d c:\deps
        git clone  --branch 3.4.10 https://github.com/opencv/opencv.git
        mkdir opencv\build
        cd opencv\build
        cmake -G "Visual Studio 15 2017 Win64" -DWITH_CUDA=OFF -DWITH_EIGEN=ON -DWITH_IPP=ON -DWITH_JASPTER=ON -DWITH_JPEG=ON -DWITH_OPENEXR=OFF -DWITH_OPENNI=OFF -DWITH_PNG=ON -DWITH_QT=OFF -DWITH_QT_OPENGL=OFF -DWITH_TBB=OFF -DWITH_TIFF=ON -DWITH_VIDEOINPUT=OFF -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_PACKAGE=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_python3=OFF -DCMAKE_PREFIX_PATH=c:\deps\install -DCMAKE_INSTALL_PREFIX=c:\deps\install ..
        cmake --build . --clean-first --config Release --target INSTALL

    - name: Build dependency - gtest
      if: steps.get-dep-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd /d c:\deps\install
        git clone --branch release-1.8.1 https://github.com/google/googletest.git

    - name: Build ifm3d
      shell: cmd
      run: |
        mkdir \ifm3d\install
        mkdir build
        cd build
        cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON -DBUILD_SDK_PKG=ON -DGTEST_CMAKE_DIR=c:\deps\install\googletest\googletest -Dgtest_force_shared_crt=TRUE -DCMAKE_PREFIX_PATH=c:\deps\install -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\ifm3d\install -DBUILD_MODULE_OPENCV=ON -DBUILD_MODULE_PCICCLIENT=ON ..
        cmake --build . --clean-first --config Release --target INSTALL

    - name: Copy third party dependencies
      shell: cmd
      run: |
        copy "c:\deps\install\bin\glog.dll" \ifm3d\install\bin
        copy "c:\deps\install\bin\libcurl.dll" \ifm3d\install\bin
        copy "c:\deps\install\bin\xmlrpc*.dll" \ifm3d\install\bin
        copy "c:\deps\install\x64\vc15\bin\opencv_core3410.dll" \ifm3d\install\bin

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ifm3d_amd64_msvc2017
        path: \ifm3d\install
