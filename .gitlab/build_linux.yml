build:linux:
  stage: build
  tags:
    - shared_docker
  variables:
    BASE_IMAGE: ubuntu:20.04
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - !reference [.docker-config, script]
    - echo "${KANIKO_PUSH_ARGS}"
    - mkdir -p /kaniko/.docker
    - echo "${DOCKER_CFG}" > /kaniko/.docker/config.json
    - /kaniko/executor --context ${CI_PROJECT_DIR}
      --dockerfile docker/ifm-robotics/deb/Dockerfile
      ${KANIKO_BUILD_ARGS}
      ${KANIKO_PUSH_ARGS}
      ${DOCKER_BUILD_ARGS}
  needs: []

# Debs
build:linux:deb:
  stage: build
  parallel:
   matrix: !reference [.configs, support-matrix]
  tags:
    - ${RUNNER}
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - !reference [.docker-config, script]
    - mkdir -p /kaniko/.docker
    - echo "${DOCKER_CFG}" > /kaniko/.docker/config.json
    - /kaniko/executor --context ${CI_PROJECT_DIR}
      --dockerfile docker/ifm-robotics/deb/Dockerfile
      --no-push
      ${KANIKO_BUILD_ARGS}
      ${DOCKER_BUILD_ARGS}
    - cp /out/*.deb ${CI_PROJECT_DIR}/
  artifacts:
    paths:
      - ifm3d*.deb
    expire_in: 1 week
  rules:
    - !reference [.tagged, rules]
    - !reference [.nightly, rules]
    - !reference [.manual, rules]
  needs: []

# Docker
build:linux:docker:
  stage: build
  parallel:
    matrix: !reference [.configs, support-matrix]
  tags:
    - ${RUNNER}
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - !reference [.docker-config, script]
    - mkdir -p /kaniko/.docker
    - echo "${DOCKER_CFG}" > /kaniko/.docker/config.json
    - mkdir -p ${CI_PROJECT_DIR}/filtered_wheels/
    - |
     ARCH=$(uname -m)
     echo "ARCH : ${ARCH}"
     PYTHON_VERSION=cp313
     if [ "$ARCH" = "x86_64" ]; then
        PATTERN="manylinux_2_17_x86_64"
     elif [ "$ARCH" = "aarch64" ]; then
        PATTERN="manylinux_2_17_aarch64"
     else
        echo "Unknown architecture: $ARCH"
        exit 1
      fi
     # Copy only matching wheel files
     find "${CI_PROJECT_DIR}/wheelhouse/" -type f -name "*-${PYTHON_VERSION}-*${PATTERN}.*" -exec cp {} ${CI_PROJECT_DIR}/filtered_wheels/ \;

    - /kaniko/executor --context ${CI_PROJECT_DIR}
      --dockerfile docker/ifm-robotics/docker/Dockerfile
      --digest-file ${CI_PROJECT_DIR}/digest/${TAG_POSTFIX}
      ${KANIKO_BUILD_ARGS}
      ${KANIKO_PUSH_ARGS}
      ${DOCKER_BUILD_ARGS}
      
  artifacts:
    paths:
          - digest/*
  needs:
    - job: build:linux:python_wheel  # Make sure to pull the artifacts from the python_wheel job
    - job: build:linux:deb
      parallel:
        matrix: !reference [.configs, support-matrix]

# Python wheels
build:linux:python_wheel:
  image: ${IMAGE}
  stage: build
  parallel:
    matrix: !reference [.configs, python-linux-matrix]
  tags:
    - ${RUNNER}
  script:
    - |
      "/opt/python/${PYTHON_VERSION}/bin/pip" wheel ${CI_PROJECT_DIR} --no-deps -w /tmp/wheelhouse/
      for whl in /tmp/wheelhouse/*.whl; do
        auditwheel repair "$whl" -w /${CI_PROJECT_DIR}/wheelhouse/
      done
  artifacts:
    paths:
      - wheelhouse/*.whl
    expire_in: 1 week
  rules:
    - !reference [.tagged, rules]
    - !reference [.nightly, rules]
    - !reference [.manual, rules]
  needs: []

# Docs
build:linux:docs:
  stage: build
  tags:
    - shared_docker
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - !reference [.docker-config, script]
    - mkdir -p /kaniko/.docker
    - echo "${DOCKER_CFG}" > /kaniko/.docker/config.json
    - /kaniko/executor --context ${CI_PROJECT_DIR}
      --dockerfile docker/ifm-robotics/doc/Dockerfile
      --no-push
      ${KANIKO_BUILD_ARGS}
      ${DOCKER_BUILD_ARGS}
    - mv /out ${CI_PROJECT_DIR}/docs
  artifacts:
    paths:
      - docs
  needs: []

build:create-dev-image:
  stage: build
  tags:
    - shared_docker
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - !reference [.docker-config, script]
    - echo "${KANIKO_PUSH_ARGS}"
    - mkdir -p /kaniko/.docker
    - echo "${DOCKER_CFG}" > /kaniko/.docker/config.json
    - /kaniko/executor --context ${CI_PROJECT_DIR}
      --dockerfile docker/ifm-robotics/check/Dockerfile
      --reproducible --snapshot-mode time --use-new-run --compressed-caching=false
      --destination ${GHCR_REPO}/dev-image:$(date '+%Y%m%d%H%M%S')
      --destination ${GHCR_REPO}/dev-image:latest
  when: manual
  allow_failure: true
  needs: []