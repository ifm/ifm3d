// -*- c++ -*-
/*
 * Copyright 2020 ifm electronic, gmbh
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * The following datas are an extract of 'test_o3r_uncompress_di.pickle' file
 * taken from "o3r-algo-example" python test!
 */

#ifndef IFM3D_DISTANCE_IMAGE_INFO_TEST_DATA_H
#define IFM3D_DISTANCE_IMAGE_INFO_TEST_DATA_H

constexpr auto distance_resolution = 0.00015259021893143654;
constexpr auto amplitude_resolution = 1.552299089269127e-08;

constexpr auto image_width = 10;
constexpr auto image_height = 5;

const std::vector<std::uint16_t> distance_buffer{
  24821, 25191, 25323, 25370, 25330, 25270, 25342, 25232, 25244, 25175,
  25303, 25086, 25136, 25126, 25017, 24882, 24872, 24922, 24867, 24809,
  24876, 24835, 24740, 24755, 24683, 24589, 24705, 24686, 24355, 24453,
  24433, 24316, 24292, 24348, 24371, 24343, 24359, 24392, 24338, 24185,
  24217, 24200, 24244, 24131, 24085, 24070, 24001, 24061, 24029, 23973};

const std::vector<std::uint16_t> amplitude_buffer{
  1407, 1173, 1168, 1278, 1235, 1190, 1170, 1168, 1167, 1171, 1176, 1148, 1143,
  1144, 1145, 1153, 1138, 1134, 1140, 1141, 1140, 1132, 1126, 1128, 1048, 1097,
  1129, 1127, 1129, 1120, 1115, 1130, 1106, 1113, 1106, 1110, 1123, 1104, 1123,
  1128, 1115, 1107, 1105, 1113, 1110, 1105, 1108, 1035, 1063, 1111};

const std::vector<float> extrinsic_optic_to_user{-0.015242096967995167,
                                                 0.0,
                                                 0.9012097120285034,
                                                 0.0,
                                                 1.649999976158142,
                                                 -1.619999885559082};

const ifm3d::IntrinsicCalibration intr_calibration{0,
                                                   {124.34428405761719,
                                                    124.34428405761719,
                                                    111.5,
                                                    85.5,
                                                    0.0,
                                                    0.3098739981651306,
                                                    -0.1439100056886673,
                                                    0.0,
                                                    0.0,
                                                    0.1866530030965805,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0,
                                                    0.0}};

const std::vector<float> distance_buffer_calc{
  3.7874417304992676, 3.843900203704834,  3.864042043685913,
  3.871213912963867,  3.865110158920288,  3.855954885482788,
  3.866941213607788,  3.850156307220459,  3.851987600326538,
  3.841458797454834,  3.860990285873413,  3.82787823677063,
  3.83550763130188,   3.83398175239563,   3.817349433898926,
  3.7967498302459717, 3.7952239513397217, 3.8028533458709717,
  3.7944610118865967, 3.7856106758117676, 3.7958343029022217,
  3.7895781993865967, 3.7750821113586426, 3.7773709297180176,
  3.7663843631744385, 3.7520408630371094, 3.7697412967681885,
  3.7668421268463135, 3.716334819793701,  3.7312886714935303,
  3.7282369136810303, 3.710383653640747,  3.706721544265747,
  3.715266704559326,  3.718776226043701,  3.714503765106201,
  3.716945171356201,  3.721980571746826,  3.713740825653076,
  3.690394401550293,  3.695277214050293,  3.692683219909668,
  3.699397325515747,  3.682154655456543,  3.675135374069214,
  3.672846555709839,  3.6623177528381348, 3.671473264694214,
  3.666590452194214,  3.6580452919006348};

const std::vector<float> amplitude_buffer_calc{
  0.030688317492604256, 0.0213428046554327,   0.02115040272474289,
  0.02532017044723034,  0.023657245561480522, 0.021956413984298706,
  0.021247584372758865, 0.02115503139793873,  0.02112499438226223,
  0.021270791068673134, 0.02144133485853672,  0.0204298235476017,
  0.0202645193785429,   0.02028077282011509,  0.020345233380794525,
  0.020601538941264153, 0.020074399188160896, 0.01993662677705288,
  0.02015192061662674,  0.02017546072602272,  0.02017291635274887,
  0.01988757774233818,  0.01968074031174183,  0.01974068395793438,
  0.01703540049493313,  0.01867782324552536,  0.019765319302678108,
  0.019705062732100487, 0.019774775952100754, 0.01945466734468937,
  0.01929309219121933,  0.019791720435023308, 0.01897505484521389,
  0.019228022545576096, 0.018979240208864212, 0.019112372770905495,
  0.019554218277335167, 0.01891421340405941,  0.019570643082261086,
  0.019748376682400703, 0.01928054168820381,  0.018991217017173767,
  0.018945397809147835, 0.01920056715607643,  0.019124023616313934,
  0.018946772441267967, 0.019031574949622154, 0.016620047390460968,
  0.017520902678370476, 0.01914162002503872};

const std::vector<float> x_calc{
  2.0214684009552,    2.0716307163238525, 2.1023194789886475,
  2.125885486602783,  2.1419570446014404, 2.1560897827148438,
  2.1814112663269043, 2.1907646656036377, 2.2105460166931152,
  2.222975969314575,  2.0742621421813965, 2.0760788917541504,
  2.099870204925537,  2.1184892654418945, 2.1284515857696533,
  2.13584041595459,   2.153764486312866,  2.176788568496704,
  2.1904096603393555, 2.2035155296325684, 2.051853656768799,
  2.0680010318756104, 2.079359531402588,  2.0998144149780273,
  2.112635374069214,  2.123274326324463,  2.1520330905914307,
  2.1688599586486816, 2.157658576965332,  2.1843948364257812,
  2.027500867843628,  2.0368781089782715, 2.0538418292999268,
  2.0774919986724854, 2.0982108116149902, 2.114345073699951,
  2.134160280227661,  2.15535044670105,   2.168621301651001,
  2.172691583633423,  2.0216262340545654, 2.039276123046875,
  2.061974287033081,  2.0710129737854004, 2.0855658054351807,
  2.10261869430542,   2.114697217941284,  2.1380574703216553,
  2.153043746948242,  2.1656370162963867};

const std::vector<float> y_calc{
  2.698387861251831,  2.7210419178009033, 2.717493772506714,
  2.7045562267303467, 2.682199478149414,  2.657658815383911,
  2.6468563079833984, 2.616938829421997,  2.5996153354644775,
  2.573862075805664,  2.7544164657592773, 2.7132694721221924,
  2.7009761333465576, 2.682067394256592,  2.6525380611419678,
  2.620292901992798,  2.6011831760406494, 2.588188409805298,
  2.564164161682129,  2.5397868156433105, 2.711453437805176,
  2.6896088123321533, 2.6618728637695312, 2.6458914279937744,
  2.620518207550049,  2.5927958488464355, 2.5870707035064697,
  2.567009687423706,  2.5146355628967285, 2.5066025257110596,
  2.666576862335205,  2.636770486831665,  2.6170129776000977,
  2.605717897415161,  2.590703010559082,  2.570141077041626,
  2.554105520248413,  2.5396900177001953, 2.5161075592041016,
  2.4823200702667236, 2.6463370323181152, 2.6275007724761963,
  2.6151347160339355, 2.5857508182525635, 2.563530445098877,
  2.5445263385772705, 2.519749402999878,  2.5083978176116943,
  2.487312078475952,  2.463686943054199};

const std::vector<float> z_calc{
  2.6086127758026123, 2.6380057334899902, 2.651061534881592,
  2.6582655906677246, 2.659440517425537,  2.659207344055176,
  2.668156623840332,  2.6644082069396973, 2.669168710708618,
  2.6682469844818115, 2.6200485229492188, 2.6091904640197754,
  2.6164793968200684, 2.619675636291504,  2.6160788536071777,
  2.610659599304199,  2.613804340362549,  2.6210861206054688,
  2.6211206912994385, 2.62093186378479,   2.569589614868164,
  2.5706424713134766, 2.568039894104004,  2.5728330612182617,
  2.5717406272888184, 2.5691328048706055, 2.580772638320923,
  2.583249807357788,  2.56441593170166,   2.574845552444458,
  2.5187129974365234, 2.5146498680114746, 2.516733407974243,
  2.5241403579711914, 2.5293591022491455, 2.5311696529388428,
  2.5359253883361816, 2.5418314933776855, 2.5418848991394043,
  2.535236358642578,  2.483341693878174,  2.485856533050537,
  2.492367744445801,  2.4885644912719727, 2.4891445636749268,
  2.4917609691619873, 2.4907987117767334, 2.4983816146850586,
  2.4998650550842285, 2.4997429847717285};

// abstract of real o3r device buffer data saved to a file
//
constexpr auto buffer_data_file = "O3RBuffer.data";
// As most of the image buffer item values are zero, for
// the test here only the buffer datas within the range
// of 9770-1000 were taken into consideration for comparison
constexpr auto compare_buffer_data_offset = 9770;

const std::vector<float> XVector{
  0,        0,        0,        0,        0,        0.145326,
  0.149209, 0.152048, 0.155774, 0.164778, 0.171372, 0.179666,
  0.18385,  0.188327, 0.19977,  0.20491,  0.210555, 0.217248,
  0.225002, 0.230732, 0.238931, 0.24575,  0.253022, 0,
  0,        0,        0,        0,        0,        0};
const std::vector<float> YVector{
  0,         0,         0,         0,         0,         -0.19074,
  -0.189902, -0.187824, -0.186929, -0.192241, -0.194531, -0.198579,
  -0.197992, -0.197743, -0.204643, -0.20491,  -0.205658, -0.207373,
  -0.210001, -0.210668, -0.213513, -0.215031, -0.216876, 0,
  0,         0,         0,         0,         0,         0};
const std::vector<float> ZVector{
  0,        0,        0,        0,        0,        0.521349,
  0.518403, 0.511965, 0.508841, 0.523093, 0.528837, 0.539463,
  0.537112, 0.535691, 0.554147, 0.554105, 0.555379, 0.55931,
  0.565739, 0.566711, 0.573666, 0.576929, 0.58106,  0,
  0,        0,        0,        0,        0,        0};
const std::vector<float> DistVector{
  0,        0,        0,        0,        0,        0.587777,
  0.585794, 0.579995, 0.577859, 0.594949, 0.602731, 0.616007,
  0.614939, 0.614939, 0.637217, 0.638895, 0.6421,   0.648356,
  0.657511, 0.660563, 0.670481, 0.67628,  0.683146, 0,
  0,        0,        0,        0,        0,        0};
const std::vector<float> Amplitude{
  -1,         0.00824955, -1, -1,         0.0124343,  0.00749799, 0.00623956,
  0.00713567, -1,         -1, 0.0046957,  -1,         0.0057006,  -1,
  0.00754121, -1,         -1, 0.00709363, 0.00587118, -1};

#endif // IFM3D_DISTANCE_IMAGE_INFO_TEST_DATA_H
