#include <chrono>
#include <string>
#include <thread>
#include <gtest/gtest.h>
#include <sodium/crypto_box.h>
#include <ifm3d/crypto/crypto.h>
#include <cstring>

static const std::vector<uint8_t> RECIPIENT_PK = {
  0x34, 0x3f, 0x4b, 0x3f, 0xee, 0xff, 0xda, 0xa7, 0x3f, 0x2e, 0xd7,
  0xca, 0x5b, 0x15, 0xd9, 0x9a, 0xcc, 0xca, 0x26, 0xb7, 0xe0, 0x69,
  0xab, 0xd2, 0x16, 0xae, 0x26, 0x2f, 0x71, 0x26, 0x74, 0x14};

static const std::vector<uint8_t> RECIPIENT_SK = {
  0x46, 0x28, 0x61, 0x86, 0xbd, 0xd6, 0xbe, 0x89, 0x90, 0x14, 0x9e,
  0xb2, 0x32, 0x86, 0x46, 0x92, 0x3b, 0x3a, 0xbd, 0xec, 0xe2, 0x05,
  0xb8, 0x64, 0xfc, 0xb1, 0x21, 0x3e, 0x3f, 0xee, 0x1f, 0x32};

static const std::vector<uint8_t> CIPHERTEXT = {
  0xe0, 0xac, 0x27, 0xaf, 0x23, 0x3a, 0xe3, 0x57, 0x24, 0xdc, 0xdf,
  0x0f, 0x49, 0x34, 0x3a, 0x4d, 0xd3, 0x1b, 0x02, 0xc4, 0x69, 0xe0,
  0x9e, 0x6f, 0x8f, 0xa8, 0x47, 0xcd, 0x3f, 0xd6, 0xc2, 0x0b, 0x01,
  0x79, 0xa4, 0x64, 0x90, 0xa9, 0x85, 0x9d, 0x54, 0x55, 0x58, 0x7c,
  0xc7, 0x49, 0xbb, 0x52, 0x96, 0x1f, 0x48, 0x0d, 0xb9, 0x71, 0x82};

static constexpr const char MESSAGE[] = "Message";
static constexpr size_t MESSAGE_LEN = sizeof(MESSAGE) - 1;
static constexpr size_t CIPHERTEXT_LEN = (crypto_box_SEALBYTES + MESSAGE_LEN);

class CryptoTest : public ::testing::Test
{
protected:
  virtual void
  SetUp()
  {}

  virtual void
  TearDown()
  {}
};

TEST_F(CryptoTest, Encrypt)
{
  ifm3d::SealedBox box(RECIPIENT_PK, RECIPIENT_SK);

  std::vector<uint8_t> ciphertext = box.Encrypt(MESSAGE);

  ASSERT_EQ(ciphertext.size(), CIPHERTEXT_LEN);

  unsigned char message[MESSAGE_LEN];
  ASSERT_EQ(crypto_box_seal_open(message,
                                 ciphertext.data(),
                                 CIPHERTEXT_LEN,
                                 RECIPIENT_PK.data(),
                                 RECIPIENT_SK.data()),
            0);
}

TEST_F(CryptoTest, Decrypt)
{
  ifm3d::SealedBox box(RECIPIENT_PK, RECIPIENT_SK);

  std::string message = box.Decrypt(CIPHERTEXT);

  EXPECT_EQ(message.length(), MESSAGE_LEN);
  EXPECT_EQ(MESSAGE, message);
}