stages:
  - build
  - test
  - deploy

variables:
  SKIP_TEST: "false"

build:windows_2019:
  stage: build
  tags:
    - ifm3d_windows
  script:
    - mkdir build
    - cd build
    - 'cmake.exe -G "Visual Studio 16 2019" -Ax64 -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON  -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=D:/ifm3d_deps/install_VS2019 -DBUILD_TESTS=ON -DCMAKE_PREFIX_PATH="D:/ifm3d_deps/install_VS2019;D:/ifm3d_deps/install_VS2019/PCL 1.12.0" -DGTEST_CMAKE_DIR=D:/ifm3d_deps/googletest/googletest -Dgtest_force_shared_crt=TRUE ..'
    - "cmake.exe --build . --config Release --target ALL_BUILD"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success

# Run unit test
test:windows_2019:
  stage: test
  tags:
    - ifm3d_windows
  variables:
    GIT_CLEAN_FLAGS: none
  script:
    - cd build
    - cmake.exe --build . --config Release --target check
  dependencies:
    - build:windows_2019
  rules:
    - if: $SKIP_TEST == "false"
      when: never
    - when: on_success
  needs:
    - build:windows_2019

.docker-config: &docker-config |
  DOCKER_BUILD_ARGS="--build-arg BASE_IMAGE=${BASE_IMAGE} --build-arg PYTHON_VERSION=3.9"
  DOCKER_CFG="{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"${CI_REGISTRY_AUTH}\"}}"
  if [ "x${USE_PROXY}" != "x" ]; then
    export http_proxy=${CI_HTTP_PROXY}
    export https_proxy=${CI_HTTPS_PROXY}
    export no_proxy=${CI_NO_PROXY}
    DOCKER_CFG="${DOCKER_CFG},\"proxies\":{\"default\":{\"httpProxy\":\"${http_proxy}\",\"httpsProxy\":\"${https_proxy}\",\"noProxy\":\"${no_proxy}\"}}"
    DOCKER_BUILD_ARGS="--build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} --build-arg no_proxy=${no_proxy}"
  fi
  DOCKER_TAG=latest
  if [ "x${CI_COMMIT_TAG}" != "x" ]; then
    DOCKER_TAG=${CI_COMMIT_TAG}
  fi
  DOCKER_CFG="${DOCKER_CFG} }"

build:linux:docker:
  stage: build
  parallel:
    matrix:
      - RUNNER: shared_docker
        BASE_IMAGE: ubuntu:20.04
        TAG_POSTFIX: -ubuntu-amd64
      - RUNNER: shared_docker_aarch64
        USE_PROXY: "yes"
        BASE_IMAGE: ubuntu:20.04
        TAG_POSTFIX: -ubuntu-arm64
      - RUNNER: shared_docker_aarch64
        USE_PROXY: "yes"
        BASE_IMAGE: nvcr.io/nvidia/l4t-base:r32.4.3
        TAG_POSTFIX: -l4t-arm64
  tags:
    - ${RUNNER}
  image:
    name: nexus.ifm.com:20443/ifm-robotics/ifm3d/kaniko:debug
    entrypoint: [""]
  script:
    - *docker-config
    - mkdir -p /kaniko/.docker
    - echo "${DOCKER_CFG}" > /kaniko/.docker/config.json
    - /kaniko/executor --context ${CI_PROJECT_DIR}
      --dockerfile docker/ifm-robotics/docker/Dockerfile
      --reproducible
      --snapshotMode time
      --cache
      --cache-repo "${CI_REGISTRY}/ifm-robotics/ifm3d/cache"
      --destination "${CI_REGISTRY}/ifm-robotics/ifm3d:${DOCKER_TAG}${TAG_POSTFIX}"
      ${DOCKER_BUILD_ARGS}
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/'
    - if: $CI_PIPELINE_SOURCE == "schedule"

build:linux:deb:
  stage: build
  parallel:
    matrix:
      - RUNNER: shared_docker_aarch64
        USE_PROXY: "yes"
        PLATFORM: linux/aarch64
        BASE_IMAGE:
          - nvcr.io/nvidia/l4t-base:r32.4.3
          - ubuntu:20.04
          - ubuntu:18.04
          - ubuntu:16.04
      - RUNNER: shared_docker
        PLATFORM: linux/amd64
        BASE_IMAGE:
          - ubuntu:20.04
          - ubuntu:18.04
          - ubuntu:16.04
  tags:
    - ${RUNNER}
  image:
    name: nexus.ifm.com:20443/ifm-robotics/ifm3d/kaniko:debug
    entrypoint: [""]
  script:
    - *docker-config
    - mkdir -p /kaniko/.docker
    - echo "${DOCKER_CFG}" > /kaniko/.docker/config.json
    - /kaniko/executor --context ${CI_PROJECT_DIR}
      --dockerfile docker/ifm-robotics/deb/Dockerfile
      --no-push
      --reproducible
      --snapshotMode time
      --cache
      --cache-repo "${CI_REGISTRY}/ifm-robotics/ifm3d/cache"
      ${DOCKER_BUILD_ARGS}
    - cp /out/*.tar ${CI_PROJECT_DIR}/
  artifacts:
    paths:
      - ifm3d-*.tar
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/'
    - if: $CI_PIPELINE_SOURCE == "schedule"

deploy:linux:docker:
  stage: deploy
  tags:
    - shared_docker
  image: toolhippie/manifest-tool:20210830
  needs:
    - job: build:linux:docker
      artifacts: true
  script:
    - *docker-config
    - mkdir -p $HOME/.docker
    - echo "${DOCKER_CFG}" > $HOME/.docker/config.json

    - >-
      manifest-tool push from-args
      --target "${CI_REGISTRY}/ifm-robotics/ifm3d:${DOCKER_TAG}-ubuntu"
      --template "${CI_REGISTRY}/ifm-robotics/ifm3d:${DOCKER_TAG}-ubuntu-ARCH"
      --platforms "linux/arm64,linux/amd64"

    - >-
      manifest-tool push from-args
      --target "${CI_REGISTRY}/ifm-robotics/ifm3d:${DOCKER_TAG}"
      --template "${CI_REGISTRY}/ifm-robotics/ifm3d:${DOCKER_TAG}-ubuntu-ARCH"
      --platforms "linux/arm64,linux/amd64"

    - >-
      manifest-tool push from-args
      --target "${CI_REGISTRY}/ifm-robotics/ifm3d:${DOCKER_TAG}-l4t"
      --template "${CI_REGISTRY}/ifm-robotics/ifm3d:${DOCKER_TAG}-l4t-ARCH"
      --platforms "linux/arm64"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/'
    - if: $CI_PIPELINE_SOURCE == "schedule"

build:docs:
  stage: build
  tags:
    - shared_docker
  image:
    name: nexus.ifm.com:20443/ifm-robotics/ifm3d/kaniko:debug
    entrypoint: [""]
  script:
    - *docker-config
    - mkdir -p /kaniko/.docker
    - echo "${DOCKER_CFG}" > /kaniko/.docker/config.json
    - /kaniko/executor --context ${CI_PROJECT_DIR}
      --dockerfile docker/ifm-robotics/doc/Dockerfile
      --no-push
      --reproducible
      --snapshotMode time
      --cache
      --cache-repo "${CI_REGISTRY}/ifm-robotics/ifm3d/cache"
      ${DOCKER_BUILD_ARGS}
    - mv /out ${CI_PROJECT_DIR}/docs
  artifacts:
    paths:
      - docs

deploy:docs:
  stage: deploy
  tags:
    - shared_docker
  image: bitnami/git
  needs:
    - job: build:docs
      artifacts: true
  script:
    - git config --global user.email "support.robotics@ifm.com"
    - git config --global user.name "ifm-csr"
    - git clone https://${DOCS_GIT_USERNAME}:${DOCS_GIT_PASSWORD}@${DOCS_GIT_REPO} repo
    - cd repo
    - git rm -rf .
    - git clean -fxd
    - cp -r ${CI_PROJECT_DIR}/docs/* ./
    - touch .nojekyll
    - git add -A
    - git commit -m "update docs"
    - git push
