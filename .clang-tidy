# Temporary list of checks so each check can be enabled and worked on individually.
Checks: >
   -*,
   bugprone-argument-comment,
#    bugprone-assert-side-effect,
#    bugprone-assignment-in-if-condition,
#    bugprone-bad-signal-to-kill-thread,
#    bugprone-bitwise-pointer-cast,
#    bugprone-bool-pointer-implicit-conversion,
#    bugprone-branch-clone,
#    bugprone-casting-through-void,
#    bugprone-chained-comparison,
#    bugprone-compare-pointer-to-member-virtual-function,
#    bugprone-copy-constructor-init,
#    bugprone-crtp-constructor-accessibility,
#    bugprone-dangling-handle,
#    bugprone-dynamic-static-initializers,
#    bugprone-empty-catch,
#    bugprone-fold-init-type,
#    bugprone-forwarding-reference-overload,
#    bugprone-implicit-widening-of-multiplication-result,
#    bugprone-inaccurate-erase,
#    bugprone-inc-dec-in-conditions,
#    bugprone-incorrect-enable-if,
#    bugprone-incorrect-enable-shared-from-this,
#    bugprone-incorrect-roundings,
#    bugprone-infinite-loop,
#    bugprone-integer-division,
#    bugprone-macro-parentheses,
#    bugprone-macro-repeated-side-effects,
#    bugprone-misplaced-operator-in-strlen-in-alloc,
#    bugprone-misplaced-pointer-arithmetic-in-alloc,
#    bugprone-misplaced-widening-cast,
#    bugprone-move-forwarding-reference,
#    bugprone-multi-level-implicit-pointer-conversion,
#    bugprone-multiple-new-in-one-expression,
#    bugprone-multiple-statement-macro,
#    bugprone-narrowing-conversions,
#    bugprone-no-escape,
#    bugprone-non-zero-enum-to-bool-conversion,
#    bugprone-nondeterministic-pointer-iteration-order,
#    bugprone-not-null-terminated-result,
#    bugprone-optional-value-conversion,
#    bugprone-parent-virtual-call,
#    bugprone-pointer-arithmetic-on-polymorphic-object,
#    bugprone-posix-return,
#    bugprone-redundant-branch-condition,
#    bugprone-reserved-identifier,
#    bugprone-return-const-ref-from-parameter,
#    bugprone-shared-ptr-array-mismatch,
#    bugprone-signal-handler,
#    bugprone-signed-char-misuse,
#    bugprone-sizeof-container,
#    bugprone-sizeof-expression,
#    bugprone-spuriously-wake-up-functions,
#    bugprone-standalone-empty,
#    bugprone-string-constructor,
#    bugprone-string-integer-assignment,
#    bugprone-string-literal-with-embedded-nul,
#    bugprone-stringview-nullptr,
#    bugprone-suspicious-enum-usage,
#    bugprone-suspicious-include,
#    bugprone-suspicious-memory-comparison,
#    bugprone-suspicious-memset-usage,
#    bugprone-suspicious-missing-comma,
#    bugprone-suspicious-realloc-usage,
#    bugprone-suspicious-semicolon,
#    bugprone-suspicious-string-compare,
#    bugprone-suspicious-stringview-data-usage,
#    bugprone-swapped-arguments,
#    bugprone-switch-missing-default-case,
#    bugprone-tagged-union-member-count,
#    bugprone-terminating-continue,
#    bugprone-throw-keyword-missing,
#    bugprone-too-small-loop-variable,
#    bugprone-unchecked-optional-access,
#    bugprone-undefined-memory-manipulation,
#    bugprone-undelegated-constructor,
#    bugprone-unhandled-exception-at-new,
#    bugprone-unhandled-self-assignment,
#    bugprone-unique-ptr-array-mismatch,
#    bugprone-unsafe-functions,
#    bugprone-unused-local-non-trivial-variable,
#    bugprone-unused-raii,
#    bugprone-unused-return-value,
#    bugprone-use-after-move,
#    bugprone-virtual-near-miss,
#    clang-analyzer-apiModeling.Errno,
#    clang-analyzer-apiModeling.TrustNonnull,
#    clang-analyzer-apiModeling.TrustReturnsNonnull,
#    clang-analyzer-apiModeling.google.GTest,
#    clang-analyzer-apiModeling.llvm.CastValue,
#    clang-analyzer-apiModeling.llvm.ReturnValue,
#    clang-analyzer-core.BitwiseShift,
#    clang-analyzer-core.CallAndMessage,
#    clang-analyzer-core.CallAndMessageModeling,
#    clang-analyzer-core.DereferenceModeling,
#    clang-analyzer-core.DivideZero,
#    clang-analyzer-core.DynamicTypePropagation,
#    clang-analyzer-core.NonNullParamChecker,
#    clang-analyzer-core.NonnilStringConstants,
#    clang-analyzer-core.NullDereference,
#    clang-analyzer-core.StackAddrEscapeBase,
#    clang-analyzer-core.StackAddressEscape,
#    clang-analyzer-core.UndefinedBinaryOperatorResult,
#    clang-analyzer-core.VLASize,
#    clang-analyzer-core.builtin.BuiltinFunctions,
#    clang-analyzer-core.builtin.NoReturnFunctions,
#    clang-analyzer-core.uninitialized.ArraySubscript,
#    clang-analyzer-core.uninitialized.Assign,
#    clang-analyzer-core.uninitialized.Branch,
#    clang-analyzer-core.uninitialized.CapturedBlockVariable,
#    clang-analyzer-core.uninitialized.NewArraySize,
#    clang-analyzer-core.uninitialized.UndefReturn,
#    clang-analyzer-cplusplus.ArrayDelete,
#    clang-analyzer-cplusplus.InnerPointer,
#    clang-analyzer-cplusplus.Move,
#    clang-analyzer-cplusplus.NewDelete,
#    clang-analyzer-cplusplus.NewDeleteLeaks,
#    clang-analyzer-cplusplus.PlacementNew,
#    clang-analyzer-cplusplus.PureVirtualCall,
#    clang-analyzer-cplusplus.SelfAssignment,
#    clang-analyzer-cplusplus.SmartPtrModeling,
#    clang-analyzer-cplusplus.StringChecker,
#    clang-analyzer-cplusplus.VirtualCallModeling,
#    clang-analyzer-deadcode.DeadStores,
#    clang-analyzer-fuchsia.HandleChecker,
#    clang-analyzer-nullability.NullPassedToNonnull,
#    clang-analyzer-nullability.NullReturnedFromNonnull,
#    clang-analyzer-nullability.NullabilityBase,
#    clang-analyzer-nullability.NullableDereferenced,
#    clang-analyzer-nullability.NullablePassedToNonnull,
#    clang-analyzer-nullability.NullableReturnedFromNonnull,
#    clang-analyzer-optin.core.EnumCastOutOfRange,
#    clang-analyzer-optin.cplusplus.UninitializedObject,
#    clang-analyzer-optin.cplusplus.VirtualCall,
#    clang-analyzer-optin.mpi.MPI-Checker,
#    clang-analyzer-optin.osx.OSObjectCStyleCast,
#    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker,
#    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker,
#    clang-analyzer-optin.performance.GCDAntipattern,
#    clang-analyzer-optin.performance.Padding,
#    clang-analyzer-optin.portability.UnixAPI,
#    clang-analyzer-optin.taint.GenericTaint,
#    clang-analyzer-optin.taint.TaintPropagation,
#    clang-analyzer-optin.taint.TaintedAlloc,
#    clang-analyzer-optin.taint.TaintedDiv,
#    clang-analyzer-osx.API,
#    clang-analyzer-osx.MIG,
#    clang-analyzer-osx.NSOrCFErrorDerefChecker,
#    clang-analyzer-osx.NumberObjectConversion,
#    clang-analyzer-osx.OSObjectRetainCount,
#    clang-analyzer-osx.ObjCProperty,
#    clang-analyzer-osx.SecKeychainAPI,
#    clang-analyzer-osx.cocoa.AtSync,
#    clang-analyzer-osx.cocoa.AutoreleaseWrite,
#    clang-analyzer-osx.cocoa.ClassRelease,
#    clang-analyzer-osx.cocoa.Dealloc,
#    clang-analyzer-osx.cocoa.IncompatibleMethodTypes,
#    clang-analyzer-osx.cocoa.Loops,
#    clang-analyzer-osx.cocoa.MissingSuperCall,
#    clang-analyzer-osx.cocoa.NSAutoreleasePool,
#    clang-analyzer-osx.cocoa.NSError,
#    clang-analyzer-osx.cocoa.NilArg,
#    clang-analyzer-osx.cocoa.NonNilReturnValue,
#    clang-analyzer-osx.cocoa.ObjCGenerics,
#    clang-analyzer-osx.cocoa.RetainCount,
#    clang-analyzer-osx.cocoa.RetainCountBase,
#    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak,
#    clang-analyzer-osx.cocoa.SelfInit,
#    clang-analyzer-osx.cocoa.SuperDealloc,
#    clang-analyzer-osx.cocoa.UnusedIvars,
#    clang-analyzer-osx.cocoa.VariadicMethodTypes,
#    clang-analyzer-osx.coreFoundation.CFError,
#    clang-analyzer-osx.coreFoundation.CFNumber,
#    clang-analyzer-osx.coreFoundation.CFRetainRelease,
#    clang-analyzer-osx.coreFoundation.containers.OutOfBounds,
#    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues,
#    clang-analyzer-security.FloatLoopCounter,
#    clang-analyzer-security.MmapWriteExec,
#    clang-analyzer-security.PointerSub,
#    clang-analyzer-security.PutenvStackArray,
#    clang-analyzer-security.SetgidSetuidOrder,
#    clang-analyzer-security.cert.env.InvalidPtr,
#    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
#    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker,
#    clang-analyzer-security.insecureAPI.UncheckedReturn,
#    clang-analyzer-security.insecureAPI.bcmp,
#    clang-analyzer-security.insecureAPI.bcopy,
#    clang-analyzer-security.insecureAPI.bzero,
#    clang-analyzer-security.insecureAPI.decodeValueOfObjCType,
#    clang-analyzer-security.insecureAPI.getpw,
#    clang-analyzer-security.insecureAPI.gets,
#    clang-analyzer-security.insecureAPI.mkstemp,
#    clang-analyzer-security.insecureAPI.mktemp,
#    clang-analyzer-security.insecureAPI.rand,
#    clang-analyzer-security.insecureAPI.strcpy,
#    clang-analyzer-security.insecureAPI.vfork,
#    clang-analyzer-unix.API,
#    clang-analyzer-unix.BlockInCriticalSection,
#    clang-analyzer-unix.Chroot,
#    clang-analyzer-unix.DynamicMemoryModeling,
#    clang-analyzer-unix.Errno,
#    clang-analyzer-unix.Malloc,
#    clang-analyzer-unix.MallocSizeof,
#    clang-analyzer-unix.MismatchedDeallocator,
#    clang-analyzer-unix.StdCLibraryFunctions,
#    clang-analyzer-unix.Stream,
#    clang-analyzer-unix.Vfork,
#    clang-analyzer-unix.cstring.BadSizeArg,
#    clang-analyzer-unix.cstring.CStringModeling,
#    clang-analyzer-unix.cstring.NotNullTerminated,
#    clang-analyzer-unix.cstring.NullArg,
#    clang-analyzer-valist.CopyToSelf,
#    clang-analyzer-valist.Uninitialized,
#    clang-analyzer-valist.Unterminated,
#    clang-analyzer-valist.ValistBase,
#    clang-analyzer-webkit.NoUncountedMemberChecker,
#    clang-analyzer-webkit.RefCntblBaseVirtualDtor,
#    clang-analyzer-webkit.UncountedLambdaCapturesChecker,
#    cppcoreguidelines-avoid-capturing-lambda-coroutines,
#    cppcoreguidelines-avoid-const-or-ref-data-members,
#    cppcoreguidelines-avoid-do-while,
#    cppcoreguidelines-avoid-goto,
#    cppcoreguidelines-avoid-non-const-global-variables,
#    cppcoreguidelines-avoid-reference-coroutine-parameters,
#    cppcoreguidelines-c-copy-assignment-signature,
#    cppcoreguidelines-explicit-virtual-functions,
#    cppcoreguidelines-init-variables,
#    cppcoreguidelines-interfaces-global-init,
#    cppcoreguidelines-macro-to-enum,
#    cppcoreguidelines-macro-usage,
#    cppcoreguidelines-misleading-capture-default-by-value,
#    cppcoreguidelines-missing-std-forward,
#    cppcoreguidelines-no-malloc,
#    cppcoreguidelines-no-suspend-with-lock,
#    cppcoreguidelines-noexcept-destructor,
#    cppcoreguidelines-noexcept-move-operations,
#    cppcoreguidelines-noexcept-swap,
#    cppcoreguidelines-prefer-member-initializer,
#    cppcoreguidelines-pro-type-const-cast,
#    cppcoreguidelines-pro-type-cstyle-cast,
#    cppcoreguidelines-pro-type-member-init,
#    cppcoreguidelines-pro-type-static-cast-downcast,
#    cppcoreguidelines-pro-type-union-access,
#    cppcoreguidelines-rvalue-reference-param-not-moved,
#    cppcoreguidelines-slicing,
#    cppcoreguidelines-special-member-functions,
#    cppcoreguidelines-use-default-member-init,
#    cppcoreguidelines-virtual-class-destructor,
#    misc-confusable-identifiers,
#    misc-const-correctness,
#    misc-coroutine-hostile-raii,
#    misc-definitions-in-headers,
#    misc-header-include-cycle,
#    misc-include-cleaner,
#    misc-misleading-bidirectional,
#    misc-misleading-identifier,
#    misc-misplaced-const,
#    misc-new-delete-overloads,
#    misc-non-copyable-objects,
#    misc-non-private-member-variables-in-classes,
#    misc-redundant-expression,
#    misc-static-assert,
#    misc-throw-by-value-catch-by-reference,
#    misc-unconventional-assign-operator,
#    misc-uniqueptr-reset-release,
#    misc-unused-alias-decls,
#    misc-unused-parameters,
#    misc-unused-using-decls,
#    misc-use-anonymous-namespace,
#    misc-use-internal-linkage,
#    modernize-avoid-bind,
#    modernize-avoid-c-arrays,
#    modernize-concat-nested-namespaces,
#    modernize-deprecated-headers,
#    modernize-deprecated-ios-base-aliases,
#    modernize-loop-convert,
#    modernize-macro-to-enum,
#    modernize-make-shared,
#    modernize-make-unique,
#    modernize-min-max-use-initializer-list,
#    modernize-pass-by-value,
#    modernize-raw-string-literal,
#    modernize-redundant-void-arg,
#    modernize-replace-auto-ptr,
#    modernize-replace-disallow-copy-and-assign-macro,
#    modernize-replace-random-shuffle,
#    modernize-return-braced-init-list,
#    modernize-shrink-to-fit,
#    modernize-type-traits,
#    modernize-unary-static-assert,
#    modernize-use-auto,
#    modernize-use-bool-literals,
#    modernize-use-constraints,
#    modernize-use-default-member-init,
#    modernize-use-designated-initializers,
#    modernize-use-emplace,
#    modernize-use-equals-default,
#    modernize-use-equals-delete,
#    modernize-use-integer-sign-comparison,
#    modernize-use-nodiscard,
#    modernize-use-noexcept,
#    modernize-use-nullptr,
#    modernize-use-override,
#    modernize-use-ranges,
#    modernize-use-starts-ends-with,
#    modernize-use-std-format,
#    modernize-use-std-numbers,
#    modernize-use-std-print,
#    modernize-use-transparent-functors,
#    modernize-use-uncaught-exceptions,
#    modernize-use-using,
#    performance-avoid-endl,
#    performance-enum-size,
#    performance-faster-string-find,
#    performance-for-range-copy,
#    performance-implicit-conversion-in-loop,
#    performance-inefficient-algorithm,
#    performance-inefficient-string-concatenation,
#    performance-inefficient-vector-operation,
#    performance-move-const-arg,
#    performance-move-constructor-init,
#    performance-no-automatic-move,
#    performance-no-int-to-ptr,
#    performance-noexcept-destructor,
#    performance-noexcept-move-constructor,
#    performance-noexcept-swap,
#    performance-trivially-destructible,
#    performance-type-promotion-in-math-fn,
#    performance-unnecessary-copy-initialization,
#    performance-unnecessary-value-param,
#    readability-avoid-const-params-in-decls,
#    readability-avoid-nested-conditional-operator,
#    readability-avoid-return-with-void-value,
#    readability-avoid-unconditional-preprocessor-if,
#    readability-braces-around-statements,
#    readability-const-return-type,
#    readability-container-data-pointer,
#    readability-container-size-empty,
#    readability-delete-null-pointer,
#    readability-duplicate-include,
#    readability-else-after-return,
#    readability-enum-initial-value,
#    readability-function-cognitive-complexity,
#    readability-function-size,
#    readability-identifier-length,
#    readability-identifier-naming,
#    readability-inconsistent-declaration-parameter-name,
#    readability-isolate-declaration,
#    readability-magic-numbers,
#    readability-make-member-function-const,
#    readability-math-missing-parentheses,
#    readability-misleading-indentation,
#    readability-misplaced-array-index,
#    readability-non-const-parameter,
#    readability-operators-representation,
#    readability-qualified-auto,
#    readability-redundant-casting,
#    readability-redundant-control-flow,
#    readability-redundant-declaration,
#    readability-redundant-function-ptr-dereference,
#    readability-redundant-inline-specifier,
#    readability-redundant-member-init,
#    readability-redundant-preprocessor,
#    readability-redundant-smartptr-get,
#    readability-redundant-string-cstr,
#    readability-redundant-string-init,
#    readability-reference-to-constructed-temporary,
#    readability-simplify-boolean-expr,
#    readability-simplify-subscript-expr,
#    readability-static-accessed-through-instance,
#    readability-static-definition-in-anonymous-namespace,
#    readability-string-compare,
#    readability-suspicious-call-argument,
#    readability-uniqueptr-delete-release,
#    readability-uppercase-literal-suffix,
#    readability-use-anyofallof,
#    readability-use-std-min-max

# TODO: final list of checks to be enabled/disabled
# Checks: >
#   -*,

#   bugprone-*,
#   -bugprone-exception-escape,
#   -bugprone-forward-declaration-namespace,
#   -bugprone-lambda-function-name,
#   -bugprone-easily-swappable-parameters,

#   clang-analyzer-*,

#   cppcoreguidelines-*,
#   -cppcoreguidelines-narrowing-conversions,
#   -cppcoreguidelines-owning-memory,
#   -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
#   -cppcoreguidelines-pro-bounds-constant-array-index,
#   -cppcoreguidelines-pro-bounds-pointer-arithmetic,
#   -cppcoreguidelines-pro-type-reinterpret-cast,
#   -cppcoreguidelines-pro-type-vararg,
#   -cppcoreguidelines-avoid-c-arrays,
#   -cppcoreguidelines-avoid-magic-numbers,
#   -cppcoreguidelines-non-private-member-variables-in-classes,

#   misc-*,
#   -misc-no-recursion,

#   modernize-*,
#   -modernize-use-trailing-return-type,

#   performance-*,

#   readability-*,
#   -readability-convert-member-functions-to-static,
#   -readability-implicit-bool-conversion,
#   -readability-named-parameter,
#   -readability-redundant-access-specifiers,
#   -readability-container-contains,

# Selection of reasoning behind various disabled diagnostics:
#
# -modernize-use-trailing-return-type: Disabled for coding-style.
#
# -bugprone-exception-escape: Too noisy. It is often very difficult to figure
#                             out which exceptions to catch in which places to
#                             silence the warning.
#
# -cppcoreguidelines-*: Many of these are already covered by other diagnostics.
#

WarningsAsErrors: >
  *,
  -clang-analyzer-core.NonNullParamChecker,
  -clang-analyzer-cplusplus.NewDeleteLeaks,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -bugprone-easily-swappable-parameters,

FormatStyle: file

CheckOptions:
  - key: readability-magic-numbers.IgnorePowersOf2IntegerValues
    value: "1"
  - key: performance-unnecessary-value-param.AllowedTypes
    value: .*[Pp]tr;.*[Pp]ointer
  - key: bugprone-exception-escape.IgnoredExceptions
    value: std::bad_alloc;std::bad_optional_access;fmt::format_error;CLI::RuntimeError;CLI::Error
  - key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value: "1"
  - key: readability-function-cognitive-complexity.IgnoreMacros
    value: "true"
  - key: readability-function-cognitive-complexity.DescribeBasicIncrements
    value: "false"
  - key: cppcoreguidelines-macro-usage.AllowedRegexp
    value: ^CAP_|^CHECK_|^VERIFY|^ERROR_.*_IF$|^PACKED$|_NOLINT$|^UTIL_|^DECLARE_|^DEFINE_|^DEFAULT_|^BEGIN_|^END_|^TRACE_
  - key: bugprone-empty-catch.AllowEmptyCatchForExceptions
    value: ifm::hwinfo::Eeprom11::ErrorNotAvailable;ifm::exception::Timeout
  - key: misc-include-cleaner.IgnoreHeaders
    value: common/FormatUtils.hpp;CLI/CLI.hpp;common/LogUtils.hpp
  - key: readability-identifier-length.IgnoredVariableNames
    value: ^id$|^it$|^ok$|^i$
  - key: readability-identifier-length.IgnoredParameterNames
    value: ^id$|^ok$
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.ConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.ConstantMemberCase
    value: lower_case
  - key: readability-identifier-naming.EnumCase
    value: lower_case
  - key: readability-identifier-naming.EnumConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.FunctionCase
    value: lower_case
  - key: readability-identifier-naming.FunctionIgnoredRegexp
    value: ^_[a-z][^A-Z]*$
  - key: readability-identifier-naming.GlobalVariableCase
    value: UPPER_CASE
  - key: readability-identifier-naming.LocalConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.LocalVariableCase
    value: lower_case
  - key: readability-identifier-naming.MacroDefinitionCase
    value: UPPER_CASE
  - key: readability-identifier-naming.MemberCase
    value: lower_case
  - key: readability-identifier-naming.MethodCase
    value: CamelCase
  - key: readability-identifier-naming.NamespaceCase
    value: lower_case
  - key: readability-identifier-naming.ParameterCase
    value: lower_case
  - key: readability-identifier-naming.PrivateMemberCase
    value: lower_case
  - key: readability-identifier-naming.PrivateMemberPrefix
    value: _
  - key: readability-identifier-naming.StaticConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.StaticVariableCase
    value: UPPER_CASE
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.TemplateParameterCase
    value: CamelCase
  - key: readability-identifier-naming.TemplateTemplateParameterCase
    value: CamelCase
  - key: readability-identifier-naming.TypeAliasCase
    value: CamelCase
  - key: readability-identifier-naming.TypedefCase
    value: CamelCase
  - key: readability-identifier-naming.TypeTemplateParameterCase
    value: CamelCase
  - key: readability-identifier-naming.UnionCase
    value: CamelCase
  - key: readability-identifier-naming.ValueTemplateParameterCase
    value: camelBack
  - key: readability-identifier-naming.VariableCase
    value: lower_case
  - key: readability-identifier-naming.VirtualMethodCase
    value: camelBack
